// Code generated by MockGen. DO NOT EDIT.
// Source: read_service.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"
	error "spotify-api/error"
	model "spotify-api/spotify/read/model"

	gin "github.com/gin-gonic/gin"
	gomock "github.com/golang/mock/gomock"
)

// MockReadService is a mock of ReadService interface.
type MockReadService struct {
	ctrl     *gomock.Controller
	recorder *MockReadServiceMockRecorder
}

// MockReadServiceMockRecorder is the mock recorder for MockReadService.
type MockReadServiceMockRecorder struct {
	mock *MockReadService
}

// NewMockReadService creates a new mock instance.
func NewMockReadService(ctrl *gomock.Controller) *MockReadService {
	mock := &MockReadService{ctrl: ctrl}
	mock.recorder = &MockReadServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockReadService) EXPECT() *MockReadServiceMockRecorder {
	return m.recorder
}

// SelectTracksByArtist mocks base method.
func (m *MockReadService) SelectTracksByArtist(ctx *gin.Context, artist string) ([]model.TrackDetailsResponse, *error.ErrorResponse) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectTracksByArtist", ctx, artist)
	ret0, _ := ret[0].([]model.TrackDetailsResponse)
	ret1, _ := ret[1].(*error.ErrorResponse)
	return ret0, ret1
}

// SelectTracksByArtist indicates an expected call of SelectTracksByArtist.
func (mr *MockReadServiceMockRecorder) SelectTracksByArtist(ctx, artist interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectTracksByArtist", reflect.TypeOf((*MockReadService)(nil).SelectTracksByArtist), ctx, artist)
}

// SelectTracksByISRC mocks base method.
func (m *MockReadService) SelectTracksByISRC(ctx *gin.Context, isrc string) ([]model.TrackDetailsResponse, *error.ErrorResponse) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectTracksByISRC", ctx, isrc)
	ret0, _ := ret[0].([]model.TrackDetailsResponse)
	ret1, _ := ret[1].(*error.ErrorResponse)
	return ret0, ret1
}

// SelectTracksByISRC indicates an expected call of SelectTracksByISRC.
func (mr *MockReadServiceMockRecorder) SelectTracksByISRC(ctx, isrc interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectTracksByISRC", reflect.TypeOf((*MockReadService)(nil).SelectTracksByISRC), ctx, isrc)
}
