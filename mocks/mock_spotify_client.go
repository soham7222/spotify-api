// Code generated by MockGen. DO NOT EDIT.
// Source: spotify_client.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"
	model "spotify-api/client/model"

	gin "github.com/gin-gonic/gin"
	gomock "github.com/golang/mock/gomock"
)

// MockSpotifyClient is a mock of SpotifyClient interface.
type MockSpotifyClient struct {
	ctrl     *gomock.Controller
	recorder *MockSpotifyClientMockRecorder
}

// MockSpotifyClientMockRecorder is the mock recorder for MockSpotifyClient.
type MockSpotifyClientMockRecorder struct {
	mock *MockSpotifyClient
}

// NewMockSpotifyClient creates a new mock instance.
func NewMockSpotifyClient(ctrl *gomock.Controller) *MockSpotifyClient {
	mock := &MockSpotifyClient{ctrl: ctrl}
	mock.recorder = &MockSpotifyClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSpotifyClient) EXPECT() *MockSpotifyClientMockRecorder {
	return m.recorder
}

// FetchTrackDetailsBasedOnISRC mocks base method.
func (m *MockSpotifyClient) FetchTrackDetailsBasedOnISRC(ctx *gin.Context, isrc string) (model.TracksSearchResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchTrackDetailsBasedOnISRC", ctx, isrc)
	ret0, _ := ret[0].(model.TracksSearchResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchTrackDetailsBasedOnISRC indicates an expected call of FetchTrackDetailsBasedOnISRC.
func (mr *MockSpotifyClientMockRecorder) FetchTrackDetailsBasedOnISRC(ctx, isrc interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchTrackDetailsBasedOnISRC", reflect.TypeOf((*MockSpotifyClient)(nil).FetchTrackDetailsBasedOnISRC), ctx, isrc)
}
