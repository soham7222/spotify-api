// Code generated by MockGen. DO NOT EDIT.
// Source: save_repository.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"
	dto "spotify-api/dto"

	gin "github.com/gin-gonic/gin"
	gomock "github.com/golang/mock/gomock"
)

// MockSaveRepository is a mock of SaveRepository interface.
type MockSaveRepository struct {
	ctrl     *gomock.Controller
	recorder *MockSaveRepositoryMockRecorder
}

// MockSaveRepositoryMockRecorder is the mock recorder for MockSaveRepository.
type MockSaveRepositoryMockRecorder struct {
	mock *MockSaveRepository
}

// NewMockSaveRepository creates a new mock instance.
func NewMockSaveRepository(ctrl *gomock.Controller) *MockSaveRepository {
	mock := &MockSaveRepository{ctrl: ctrl}
	mock.recorder = &MockSaveRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSaveRepository) EXPECT() *MockSaveRepositoryMockRecorder {
	return m.recorder
}

// Insert mocks base method.
func (m *MockSaveRepository) Insert(ctx *gin.Context, track dto.TrackDbModel) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Insert", ctx, track)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Insert indicates an expected call of Insert.
func (mr *MockSaveRepositoryMockRecorder) Insert(ctx, track interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockSaveRepository)(nil).Insert), ctx, track)
}
