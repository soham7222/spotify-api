// Code generated by MockGen. DO NOT EDIT.
// Source: save_service.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"
	error "spotify-api/error"
	response "spotify-api/spotify/save/model/response"

	gin "github.com/gin-gonic/gin"
	gomock "github.com/golang/mock/gomock"
)

// MockSaveService is a mock of SaveService interface.
type MockSaveService struct {
	ctrl     *gomock.Controller
	recorder *MockSaveServiceMockRecorder
}

// MockSaveServiceMockRecorder is the mock recorder for MockSaveService.
type MockSaveServiceMockRecorder struct {
	mock *MockSaveService
}

// NewMockSaveService creates a new mock instance.
func NewMockSaveService(ctrl *gomock.Controller) *MockSaveService {
	mock := &MockSaveService{ctrl: ctrl}
	mock.recorder = &MockSaveServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSaveService) EXPECT() *MockSaveServiceMockRecorder {
	return m.recorder
}

// FetchFromSpotifyAndInsertIntoDB mocks base method.
func (m *MockSaveService) FetchFromSpotifyAndInsertIntoDB(context *gin.Context, isrc string) (response.CreateSongResponse, *error.ErrorResponse) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchFromSpotifyAndInsertIntoDB", context, isrc)
	ret0, _ := ret[0].(response.CreateSongResponse)
	ret1, _ := ret[1].(*error.ErrorResponse)
	return ret0, ret1
}

// FetchFromSpotifyAndInsertIntoDB indicates an expected call of FetchFromSpotifyAndInsertIntoDB.
func (mr *MockSaveServiceMockRecorder) FetchFromSpotifyAndInsertIntoDB(context, isrc interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchFromSpotifyAndInsertIntoDB", reflect.TypeOf((*MockSaveService)(nil).FetchFromSpotifyAndInsertIntoDB), context, isrc)
}
